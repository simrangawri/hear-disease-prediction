# -*- coding: utf-8 -*-
"""5_Simran, Anushka .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UznsdYpTXEpK-F-KsAUzeURea5KQrk3m
"""

import pandas as pd
df = pd.read_csv('/content/heart_deseases.csv')
df.head()

df.shape

"""#Logistic Regression"""

#Removing Outliers
lwt = df['trestbps'].mean() - 2*df['trestbps'].std()
upt = df['trestbps'].mean() + 2*df['trestbps'].std()

df1 = df[(df['trestbps'] >= lwt) & (df['trestbps'] <= upt)]

lwt = df1['chol'].mean() - 2*df1['chol'].std()
upt = df1['chol'].mean() + 2*df1['chol'].std()

df2 = df1[(df1['chol'] >= lwt) & (df1['chol'] <= upt)]

import matplotlib.pyplot as plt
plt.scatter(range(0,len(df2)),df2['chol'],c=df2['target'])
plt.show()

df2.shape

df2['target'].unique()

df2['target'].value_counts()

from sklearn.metrics import accuracy_score,recall_score,f1_score,precision_score,roc_auc_score,confusion_matrix

def evaluation(Y_test,Y_pred):
  acc=accuracy_score(Y_test,Y_pred)
  rcl=recall_score(Y_test,Y_pred)
  f1=f1_score(Y_test,Y_pred)


  metric_dict={'accuracy': round(acc,3),
               'recall': round(rcl,3),
               'F1 score': round(f1,3),

              }

  return print(metric_dict)

X = df2.drop('target',axis=1)
Y = df2[['target']]

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(X,Y,random_state=2)

from sklearn.linear_model import LogisticRegression
lmodel = LogisticRegression()

lmodel.fit(xtrain,ytrain)

print(lmodel.score(xtrain,ytrain))
print(lmodel.score(xtest,ytest))

from sklearn.metrics import confusion_matrix
confusion_matrix(ytrain,lmodel.predict(xtrain))

confusion_matrix(ytest,lmodel.predict(xtest))

"""#Using KNN"""

X = df2.drop('target',axis=1)
Y = df2[['target']]

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(X,Y,random_state=2)

from sklearn.neighbors import KNeighborsClassifier
kmodel = KNeighborsClassifier(n_neighbors=5)

kmodel.fit(xtrain,ytrain)

#Evaluation
print(kmodel.score(xtrain,ytrain))
print(kmodel.score(xtest,ytest))

#Tune the value of k to get best possible parameter for prediction
tr_acc = []
ts_acc = []
for i in range(1,13):
  kms = KNeighborsClassifier(n_neighbors=i)
  kms.fit(xtrain,ytrain)

  tr_acc.append(kms.score(xtrain,ytrain))
  ts_acc.append(kms.score(xtest,ytest))

print(ts_acc)

import matplotlib.pyplot as plt
plt.plot(range(1,13),tr_acc)
plt.plot(range(1,13),ts_acc,c='r')
plt.show()

#Predictions
ytrain_pred = kmodel.predict(xtrain)

print(ytrain.shape)
print(ytrain_pred.shape)

(ytrain == ytrain_pred.reshape(207,1)).sum()

(ytrain == ytrain_pred.reshape(207,1)).sum()/len(xtrain)

kmodel.score(xtrain,ytrain)

ytest_pred = kmodel.predict(xtest)
ytest_pred.shape
ytest.shape

(ytest==ytest_pred.reshape(70,1)).sum()

(ytest==ytest_pred.reshape(70,1)).sum()/len(xtest)

kmodel.score(xtrain,ytrain)

kmodel.score(xtest,ytest)

evaluation(ytest,ytest_pred)

"""#Using Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
dmodel = DecisionTreeClassifier()

dmodel.fit(xtrain,ytrain)

print(dmodel.score(xtrain,ytrain))
print (dmodel.score(xtest,ytest))

from sklearn.tree import export_graphviz
from IPython.display import Image
import pydotplus

dot_data = export_graphviz(dmodel,feature_names=xtrain.columns)
graph = pydotplus.graph_from_dot_data(dot_data)
Image(graph.create_png())

from sklearn.metrics import confusion_matrix

ytrain_pred = dmodel.predict(xtrain)
ytest_pred = dmodel.predict(xtest)

confusion_matrix(ytrain,ytrain_pred)

confusion_matrix(ytest,ytest_pred)

evaluation(ytest,ytest_pred)

"""#Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rmodel = RandomForestClassifier(max_depth=12)

rmodel.fit(xtrain,ytrain)

print(rmodel.score(xtrain,ytrain))
print(rmodel.score(xtest,ytest))
xtest.shape

from sklearn.ensemble import RandomForestClassifier
import numpy as  np
y_pred=rmodel.predict(xtest)
evaluation(ytest,y_pred)

xtrain.columns

def predict_hdisease(age, sex, cp, trestbps, chol, fbs, restecg, thalach,
       exang, oldpeak, slope, ca, thal):

  uv = np.zeros(xtrain.shape[1])
  uv[0] = age
  uv[1] = sex
  uv[2] = cp
  uv[3] = trestbps
  uv[4] = chol
  uv[5] = fbs
  uv[6] = restecg
  uv[7] = thalach
  uv[8] =  exang
  uv[9] = oldpeak
  uv[10] =  slope
  uv[11] = ca
  uv[12] = thal

  return rmodel.predict([uv])

print(predict_hdisease(	67	,1,	2,	152,	212,	0,	0	,150,	0,	0.8,	1,	0,	3	))

df.dtypes

"""#Saving Model for Further Use"""

#library pickle to save ur model
import pickle
#file handling part
with open('heartdisease.pickle','wb') as f:
  pickle.dump(lmodel,f)

#feature information in columns saved in form of json

import json
columns = {'data_columns' : [col.lower() for col in X.columns] }

with open('cols.json','w') as f:
  f.write(json.dumps(columns))